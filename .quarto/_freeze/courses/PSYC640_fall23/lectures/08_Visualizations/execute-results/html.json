{
  "hash": "b1abb0f84d5bd907b73f5550756efa23",
  "result": {
    "markdown": "---\ntitle: \"Figures: Using ggplot2\"\nsubtitle: \"PSYC 640 - Fall 2023\"\nauthor: \"Dustin Haraden, PhD\"\nformat: \n  revealjs:\n    multiplex: true\n    scrollable: true\n    slide-number: true\n    incremental: false\n    touch: true\n    code-overflow: wrap\n    theme: dark\nexecute: \n  echo: true\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Last Class\n\n::: nonincremental\n-   Comparing Means: $t$-test\n    -   Independent Samples $t$-test Review\n    -   Paired Samples $t$-test\n:::\n\n------------------------------------------------------------------------\n\n## Looking Ahead\n\n-   Plan to have 2 more labs that will be similar to the last lab\n\n    -   Likely take place on 10/25 and sometime the week of 11/13\n\n-   Outside of these labs, I am going to plan on having additional mini-labs\n\n    -   Likely to take place on 11/1, 11/22 and 11/29 (will update based on how things are going in class)\n\n------------------------------------------------------------------------\n\n## Today...\n\nWorking with `ggplot2` to get some really fancy visualizations!\n\nMaybe integrating some generative AI (ChatGPT) to help us out too\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# File management\nlibrary(here)\n# for dplyr, ggplot2\nlibrary(tidyverse)\n#Loading data\nlibrary(rio)\n\n#for the penguins dataset\n#install.packages('palmerpenguins')\nlibrary(palmerpenguins)\n\n#Remove Scientific Notation \noptions(scipen=999)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Take a look at the data\n\nWill be using a dataset from the `palmerpenguins` library ([link](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-distributions)) which is a dataset about...[penguins](https://www.youtube.com/watch?v=-GnLDJAgrws). This function will pull that data into our environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(penguins)\n```\n:::\n\n\nNow we can get some descriptive statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins %>% \n  group_by(species) %>% \n  summarize(\n    mean_flipper = mean(flipper_length_mm, na.rm = TRUE),\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    std_flipper = sd(flipper_length_mm, na.rm = TRUE), \n    std_mass = sd(body_mass_g, na.rm = TRUE), \n    cor_flip_mass = cor(flipper_length_mm, body_mass_g)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 6\n  species   mean_flipper mean_mass std_flipper std_mass cor_flip_mass\n  <fct>            <dbl>     <dbl>       <dbl>    <dbl>         <dbl>\n1 Adelie            190.     3701.        6.54     459.        NA    \n2 Chinstrap         196.     3733.        7.13     384.         0.642\n3 Gentoo            217.     5076.        6.48     504.        NA    \n```\n:::\n:::\n\n\n# `ggplot2`\n\n------------------------------------------------------------------------\n\n## `ggplot2` from the `tidyverse`\n\nSince we have already installed and loaded the library, we don't have to do anything else at this point!\n\n`ggplot2` follows the \"grammar of graphics\"\n\n-   Theoretical framework for creating data visualizations\n-   Breaks the process down into separate components:\n\n::: columns\n::: {.column width=\"50%\"}\nData\n\nAesthetics (`aes`)\n\nGeometric Objects (`geoms`)\n:::\n\n::: {.column width=\"50%\"}\nFaceting\n\nThemes\n:::\n:::\n\n------------------------------------------------------------------------\n\n## Grammar of Graphics\n\n[![](/images/grammargraphics.webp){width=\"779\"}](https://gkesari.medium.com/my-talk-on-grammar-of-graphics-the-secret-sauce-of-powerful-data-stories-3da618cf1bbf)\n\n# `ggplot2` [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n\n------------------------------------------------------------------------\n\n## `ggplot2` syntax {.smaller}\n\nThere is a basic structure to create a plot within `ggplot2`, and consists of at least these three things:\n\n1.  A Data Set\n2.  Coordinate System\n3.  Geoms - visual marks to represent the data points\n\nIn R it looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n\n#or how I like to do it\n<DATA> %>% \n  ggplot(aes(<MAPPINGS>)) + \n  <GEOM_FUNCTION>()\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## `ggplot2` syntax\n\nLet's start with a basic figure with `palmerpenguins`\n\n**First** we will define the data that we are using and the variables we are visualizing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#the dataset is called penguins\n\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g))\n```\n:::\n\n\nWhat happens?\n\n------------------------------------------------------------------------\n\nWe forgot to tell it what to do with the data!\n\nNeed to add the appropriate `geom` to have it plot points for each observation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g)) + \n  geom_point()\n```\n:::\n\n\n***\\\nNote:*** the `geom_point()` layer will inherit what is in the `aes()` in the previous layer\n\n------------------------------------------------------------------------\n\n## Adding in Color\n\nMaybe we would like to have each of the points colored by their respective `species`\n\nThis information will be added to the `aes()` within the `geom_point()` layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g)) + \n  geom_point(aes(color = species))\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Including a fit line\n\nWhy don't we put in a line that represents the relationship between these variables?\n\nWe will want to add another layer/geom\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g)) + \n  geom_point(aes(color = species)) + \n  geom_smooth()\n```\n:::\n\n\n\\\nThat looks a little wonky...why is that? Did you get a note in the console?\n\n------------------------------------------------------------------------\n\n## Including a fit line\n\nThe `geom_smooth()` defaults to using a loess line to fit to the data\n\nIn order to update that, we need to change some of the defaults for that layer and specify that we want a \"linear model\" or `lm` function to the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g)) + \n  geom_point(aes(color = species)) + \n  geom_smooth(method = 'lm')\n```\n:::\n\n\n\\\nDid that look a little better?\n\n------------------------------------------------------------------------\n\n## Individual fit lines\n\nIt might make more sense to have individual lines for each of the species instead of something that is across all\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g, \n             color = species)) + \n  geom_point() + \n  geom_smooth(method = 'lm')\n```\n:::\n\n\n\\\nWhat did we move around from the last set of code?\n\n------------------------------------------------------------------------\n\n## Updating Labels/Title\n\nIt will default to including the variable names as the `x` and `y` labels, but that isn't something that makes sense. Also would be good to have a title!\n\nWe add on another layer called `labs()` for our labels ([link](https://ggplot2.tidyverse.org/reference/labs.html))\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm, \n             y = body_mass_g, \n             color = species)) + \n  geom_point() + \n  geom_smooth(method = 'lm') + \n  labs(\n    title = \"Palmer Penguins\",\n    subtitle = \"Body Mass by Flipper Length\", \n    x = \"Flipper Length (mm)\", \n    y = \"Body Mass (g)\", \n    color = \"Species\"\n  )\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Penguin Histogram\n\nTaken from the website for `palmerpenguins` ([link](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-distributions))\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  ggplot(aes(x = flipper_length_mm)) +\n    geom_histogram(aes(fill = species), \n                   alpha = 0.5, \n                   position = \"identity\")\n```\n\n::: {.cell-output-display}\n![](08_Visualizations_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n# Example 2\n\nI have uploaded three datasets. I would like us to explore the datasets together to see what is going on with them.\n\n------------------------------------------------------------------------\n\n## The Three Datasets\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndata1 <- import(\"https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/courses/PSYC640_fall23/data/data1.csv\") %>% \n  mutate(dataset = \"data1\")\n\ndata2 <- import(\"https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/courses/PSYC640_fall23/data/data2.csv\") %>% \n  mutate(dataset = \"data2\")\n\ndata3 <- import(\"https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/courses/PSYC640_fall23/data/data3.csv\") %>% \n  mutate(dataset = \"data3\")\n```\n:::\n\n\nWe need to combine them together just to make things easier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthree_data <- bind_rows(data1, data2, data3)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Descriptive Stats on the 3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nthree_data %>%\n  group_by(dataset) %>% \n  summarize(\n    mean_x = mean(x),\n    mean_y = mean(y),\n    std_x = sd(x), \n    std_y = sd(y), \n    cor_xy = cor(x,y)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 6\n  dataset mean_x mean_y std_x std_y  cor_xy\n  <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl>\n1 data1     54.3   47.8  16.8  26.9 -0.0641\n2 data2     54.3   47.8  16.8  26.9 -0.0683\n3 data3     54.3   47.8  16.8  26.9 -0.0645\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Visualize the datasets\n\nCreate a scatterplot for each of the datasets\n\nBut I didn't talk about how to do that for multiple datasets...\n\nCheck out [ChatGPT](https://chat.openai.com/)\n\n------------------------------------------------------------------------\n\n# Try it out on data\n\nTake a look at the data that we have been using and try making various visualizations for two of the variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_school <- import(\"https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/courses/PSYC640_fall23/data/NM-NY_CAS.csv\")\n```\n:::\n\n\n# Next time...\n\n-   ANOVA!\n",
    "supporting": [
      "08_Visualizations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}