library(tidyverse)
#Loading data
library(rio)
#Remove Scientific Notation
options(scipen=999)
720.3/1058.167
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
?geom_vline
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
annotate("text",
label = "F=0.68",
x = 0.7, y = 0.65)) +
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
annotate("text",
label = "F=0.68",
x = 0.7, y = 0.65) +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
annotate("text",
label = "F=0.68",
x = 1, y = 0.65, size = 8, color = "red") +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
annotate("text",
label = "F=0.68",
x = 0.7, y = 0.65, size = 8, color = "red") +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
#| code-fold: true
#|
data.frame(F = c(0,8)) %>%
ggplot(aes(x = F)) +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "line") +
stat_function(fun = function(x) df(x, df1 = 3, df2 = 196),
geom = "area", xlim = c(2.65, 8), fill = "purple") +
geom_vline(aes(xintercept = 2.65), color = "purple") +
geom_vline(aes(xintercept = 0.68), color = "red") +
annotate("text",
label = "F=0.68",
x = 1.3, y = 0.65, size = 8, color = "red") +
scale_y_continuous("Density") + scale_x_continuous("F statistic", breaks = NULL) +
theme_bw(base_size = 20)
# | code-fold: true
n <- 100
x <- rnorm(n, mean = 10, sd = 2)
y <- 2 * x + rnorm(n, mean = 0, sd = 2)
corr_data <- data.frame(x,y)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm")
# for dplyr, ggplot2
library(tidyverse)
#Loading data
library(rio)
#Remove Scientific Notation
options(scipen=999)
# | code-fold: true
n <- 100
x <- rnorm(n, mean = 10, sd = 2)
y <- 2 * x + rnorm(n, mean = 0, sd = 2)
corr_data <- data.frame(x,y)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm")
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm",
se = FALSE)
# | code-fold: true
set.seed(42)
n <- 200
x <- rnorm(n, mean = 10, sd = 2)
y <- 2 * x + rnorm(n, mean = 0, sd = 2)
corr_data <- data.frame(x,y)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm",
se = FALSE)
# | code-fold: true
set.seed(42)
n <- 200
x <- rnorm(n, mean = 10, sd = 2)
y <- 2 * x + rnorm(n, mean = 0, sd = 2)
corr_data <- data.frame(x,y)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm",
se = FALSE)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm",
se = FALSE) +
labs(
x = "Number of Houses",
y = "Amount of Candy"
)
# for dplyr, ggplot2
library(tidyverse)
#Loading data
library(rio)
#Remove Scientific Notation
options(scipen=999)
# | code-fold: true
set.seed(42)
n <- 200
x <- rnorm(n, mean = 10, sd = 2)
y <- 2 * x + rnorm(n, mean = 0, sd = 2)
corr_data <- data.frame(x,y)
corr_data %>%
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method="lm",
se = FALSE) +
labs(
x = "Number of Houses",
y = "Amount of Candy"
)
cov(corr_data)
xy_cov <- cov(corr_data)
View(xy_cov)
cov(corr_data)
cov(corr_data)[1,2]
cor(corr_data)
cor(corr_data$x, corr_data$y)
cor.test(x, y, data = corr_data)
school <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/NM-NY_CAS.csv")
View(school)
school <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/NM-NY_CAS.csv") %>%
select(Ageyears, Sleep_Hours_Schoolnight, Sleep_Hours_Non_Schoolnight,
Reaction_time, Score_in_memory_game)
cor(school)
cor(school) %>%
kableExtra::kable()
#| code-fold: true
school <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/NM-NY_CAS.csv") %>%
select(Ageyears, Sleep_Hours_Schoolnight, Sleep_Hours_Non_Schoolnight,
Reaction_time, Score_in_memory_game) %>%
janitor::clean_names()
cor(school, use = "complete")
cor(school, use = "pairwise")
# nice tables
library(sjPlot)
tab_corr(school, na.deletion = "listwise", triangle = "lower")
#| code-fold: true
data1 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data1.csv") %>%
mutate(dataset = "data1")
data2 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data2.csv") %>%
mutate(dataset = "data2")
data3 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data3.csv") %>%
mutate(dataset = "data3")
three_data <- bind_rows(data1, data2, data3)
data1 %>%
ggplot(aes(x, y)) +
geom_point()
data1 %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth
data1 %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm")
data1 %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
library(ggpubr)
data1 %>%
ggscatter(x, y,
add = "reg.line")
ggscatter(data1, x, y,
add = "reg.line")
data1 %>%
ggscatter("x", "y",
add = "reg.line")
data1 %>%
ggscatter("x", "y")
data1 %>%
ggscatter("x", "y",
add = "reg.line")
data1 %>%
ggscatter("x", "y",
add = "reg.line") +
stat_cor()
three_data %>%
group_by(dataset) %>%
summarize(
mean_x = mean(x),
mean_y = mean(y),
std_x = sd(x),
std_y = sd(y),
cor_xy = cor(x,y)
)
data1 %>%
ggscatter("x", "y",
add = "reg.line") +
stat_cor() +
labs(title = "Dataset 1")
data1 %>%
ggscatter("x", "y",
add = "reg.line") +
stat_cor(label.y = 55) +
labs(title = "Dataset 1")
?augment
??augment
set.seed(42)
x.1 <- rnorm(10, 0, 1)
e.1 <- rnorm(10, 0, 2)
y.1 <- .5 + .55 * x.1 + e.1
d.1 <- data.frame(x.1,y.1)
m.1 <- lm(y.1 ~ x.1, data = d.1)
d1.f<- augment(m.1)
library(broom)
d1.f<- augment(m.1)
View(m.1)
View(d.1)
View(d1.f)
# Chunk 1
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Chunk 2
options(scipen = 999)
library(knitr)
# function to display only part of the output
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
knitr::opts_chunk$set(message = FALSE,
warning = FALSE) # suppress messages
# Chunk 3
options(scipen=999)
library(car) #recode conflict with tidyverse
library(tidyverse)
library(rio)
library(broom)
library(psych)
library(easystats)
library(sjPlot)
student_perf <- read_csv("https://raw.githubusercontent.com/dharaden/psyc640/main/data/Multiple_reg/Student_Performance.csv")
library(janitor)
?insight::clean_names
student_perf <- read_csv("https://raw.githubusercontent.com/dharaden/psyc640/main/data/Multiple_reg/Student_Performance.csv") %>%
clean_names()
View(student_perf)
names(student_perf)
fit1 <- lm(performance_index ~ hours_studied,
data = student_perf)
# Chunk 1
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Chunk 2
options(scipen = 999)
library(knitr)
# function to display only part of the output
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
knitr::opts_chunk$set(message = FALSE,
warning = FALSE) # suppress messages
# Chunk 3
options(scipen=999)
library(car) #recode conflict with tidyverse
library(tidyverse)
library(rio)
library(broom)
library(psych)
library(easystats)
library(sjPlot)
library(janitor)
# Chunk 4
student_perf <- read_csv("https://raw.githubusercontent.com/dharaden/psyc640/main/data/Multiple_reg/Student_Performance.csv") %>%
clean_names()
fit1 <- lm(performance_index ~ hours_studied,
data = student_perf)
sjPlot::tab_model(fit1)
car::avPlots(fit1)
# Chunk 1
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Chunk 2
options(scipen = 999)
library(knitr)
# function to display only part of the output
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
knitr::opts_chunk$set(message = FALSE,
warning = FALSE) # suppress messages
# Chunk 3
options(scipen=999)
library(car) #recode conflict with tidyverse
library(tidyverse)
library(rio)
library(broom)
library(psych)
library(easystats)
library(sjPlot)
library(janitor)
# Chunk 1
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Chunk 2
options(scipen = 999)
library(knitr)
# function to display only part of the output
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
knitr::opts_chunk$set(message = FALSE,
warning = FALSE) # suppress messages
# Chunk 3
options(scipen=999)
library(car) #recode conflict with tidyverse
library(tidyverse)
library(rio)
library(broom)
library(psych)
library(easystats)
library(sjPlot)
library(janitor)
# Chunk 4
student_perf <- read_csv("https://raw.githubusercontent.com/dharaden/psyc640/main/data/Multiple_reg/Student_Performance.csv") %>%
clean_names()
fit1 <- lm(performance_index ~ hours_studied,
data = student_perf)
summary(fit1)
sjPlot::tab_model(fit1)
report(fit1)
check_model(fit1)
plot_model(fit1)
student_perf %>%
ggplot(aes(x = hours_studied,
y = performance_index)) +
geom_point() +
geom_smooth(method = "lm")
sjPlot::sjt.lm(fit1)
plot_residuals(fit1)
sjPlot::tab_model(fit1)
sjPlot::tab_model(fit1, show.std = TRUE)
sjPlot::tab_model(fit1, show.std = TRUE,
title = "stuff")
sjPlot::tab_model(fit1, show.std = TRUE,
title = "Figure 1")
sjPlot::tab_model(fit1, show.std = TRUE, show.stat = TRUE,
title = "Figure 1")
sjPlot::tab_model(fit1, show.std = TRUE,
title = "Figure 1",
pred.labels = c("Int.", "Hours Studied"))
sjPlot::tab_model(fit1, show.std = TRUE,
title = "Figure 1",
pred.labels = c("Int.", "Hours Studied"),
dv.labels = "Performance Index")
names(student_perf)
describe(student_perf)
fit2 <- lm(performance_index ~ hours_studied + sleep_hours,
data = student_perf)
summary(fit2)
fit1 <- lm(performance_index ~ sleep_hours,
data = student_perf)
summary(fit1)
fit2 <- lm(performance_index ~ hours_studied*sleep_hours,
data = student_perf)
summary(fit2)
fit2 <- lm(performance_index ~ hours_studied + sleep_hours + previous scores,
fit2 <- lm(performance_index ~ hours_studied + sleep_hours + previous_scores,
data = student_perf)
summary(fit2)
tab_model(fit2)
report(fit2)
sjPlot::tab_model(fit1, show.std = TRUE,
title = "Figure 1",
pred.labels = c("Int.", "Hours Studied"),
dv.labels = "Performance Index")
#Cook's Distance
plot(fit2, which = 4)
#Leverage
plot(fit2, which = 5)
check_model(fit2)
car::vif(fit2)
